<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Z9.Mvvm</name>
    </assembly>
    <members>
        <member name="T:Z9.Mvvm.Command.CommandBase">
            <summary>
            Mvvm command tool base class
            </summary>
        </member>
        <member name="E:Z9.Mvvm.Command.CommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Command.CommandBase.CanExecute(System.Object)">
            <summary>
            Define a method that determines whether the command can excute
            </summary>
            <param name="parameter">Para</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Z9.Mvvm.Command.CommandBase.Execute(System.Object)">
            <summary>
            Define a method to be called when command is Triggered
            </summary>
            <param name="parameter">Para</param>
        </member>
        <member name="M:Z9.Mvvm.Command.CommandBase.OnCanExecuteChanged">
            <summary>
            Manually enumerate commands whether they can be triggered, this method will be executed on UI thread automatically
            </summary>
        </member>
        <member name="T:Z9.Mvvm.Command.RelayCommand">
            <summary>
            Mvvm command tool
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Command.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Create command instance
            </summary>
            <param name="excute">The execution logic</param>
            <param name="canExcute">The execution status logic</param>
        </member>
        <member name="M:Z9.Mvvm.Command.RelayCommand.CanExecute(System.Object)">
            <summary>
            Define a method that determines whether the command can execute
            </summary>
            <param name="parameter">This parameter will be always ignored</param>
            <returns>true</returns>
        </member>
        <member name="M:Z9.Mvvm.Command.RelayCommand.Execute(System.Object)">
            <summary>
            Define a method to be called when command is invoked
            </summary>
            <param name="parameter">This parameter will be always triggered</param>
        </member>
        <member name="T:Z9.Mvvm.Command.RelayCommand`1">
            <summary>
            Mvvm command tool with parameter
            </summary>
            <typeparam name="T">CommandParameter Type</typeparam>
        </member>
        <member name="M:Z9.Mvvm.Command.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Create command instance
            </summary>
            <param name="excute">The execution logic</param>
            <param name="canExcute">The execution status logic</param>
        </member>
        <member name="M:Z9.Mvvm.Command.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Define a method that determines whether the command can execute
            </summary>
            <param name="parameter">Para</param>
            <returns>Whether executable</returns>
        </member>
        <member name="M:Z9.Mvvm.Command.RelayCommand`1.Execute(System.Object)">
            <summary>
            Define a method to be called when command is triggered
            </summary>
            <param name="parameter">Para</param>
        </member>
        <member name="T:Z9.Mvvm.Converter.Bool2Object">
            <summary>
            Converts the input Boolean, nullable Boolean or DefaultBoolean value to a value of any type
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Converter.Bool2Object.TrueValue">
            <summary>
            true value
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Converter.Bool2Object.FalseValue">
            <summary>
            false value
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Converter.Bool2Object.NullValue">
            <summary>
            null value
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Converter.Bool2Object.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from source value type to target type
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>target value</returns>
        </member>
        <member name="M:Z9.Mvvm.Converter.Bool2Object.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This converter not allowed to convert back
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>source value</returns>
        </member>
        <member name="T:Z9.Mvvm.Converter.Bool2Visibility">
            <summary>
            An extended version of the standard converter that maps Boolean values to the values of the Visibility type and vice versa
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Converter.Bool2Visibility.UseHiddenInstead">
            <summary>
            Use Hidden rather than Collapsed
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Converter.Bool2Visibility.Inversed">
            <summary>
            Inverse the boolean value
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Converter.Bool2Visibility.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from source value type to target type
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>target value</returns>
        </member>
        <member name="M:Z9.Mvvm.Converter.Bool2Visibility.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from target value type to source type
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>source value</returns>
        </member>
        <member name="T:Z9.Mvvm.Converter.BooleanNegation">
            <summary>
            Inverse the bool value
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Converter.BooleanNegation.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse the bool value
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>target value</returns>
        </member>
        <member name="M:Z9.Mvvm.Converter.BooleanNegation.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This converter not allowed to convert back
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>source value</returns>
        </member>
        <member name="T:Z9.Mvvm.Converter.Func2Object">
            <summary>
            Use delegate to create a converter, no more IValueConverter implement manually.
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Converter.Func2Object.Function">
            <summary>
            Convert Func defination
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Converter.Func2Object.FunctionBack">
            <summary>
            ConvertBack Func defination
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Converter.Func2Object.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Invoke the func
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>target value</returns>
        </member>
        <member name="M:Z9.Mvvm.Converter.Func2Object.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This converter not allowed to convert back
            </summary>
            <param name="value">source value</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>source value</returns>
        </member>
        <member name="M:Z9.Mvvm.Converter.Func2Object.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Converter.Func2Object.#ctor(System.Func{System.Object,System.Object})">
            <summary>
            Construct with delegate
            </summary>
            <param name="func">Func</param>
        </member>
        <member name="M:Z9.Mvvm.Converter.Func2Object.#ctor(System.Func{System.Object,System.Object},System.Func{System.Object,System.Object})">
            <summary>
            Construct with two delegate
            </summary>
            <param name="func"></param>
            <param name="funcBack"></param>
        </member>
        <member name="T:Z9.Mvvm.Messaging.MessageWithCallBack">
            <summary>
            Inner defined message type with callback
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Messaging.MessageWithCallBack.Message">
            <summary>
            Message taking with
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Messaging.MessageWithCallBack.#ctor(System.Action)">
            <summary>
            Create MessageWithCallBack instance
            </summary>
            <param name="act">Delegate</param>
        </member>
        <member name="M:Z9.Mvvm.Messaging.MessageWithCallBack.#ctor(System.String,System.Action)">
            <summary>
            Create MessageWithCallBack instance
            </summary>
            <param name="message">Message</param>
            <param name="act">Delegate</param>
        </member>
        <member name="M:Z9.Mvvm.Messaging.MessageWithCallBack.Execute">
            <summary>
            Execute the delegate
            </summary>
        </member>
        <member name="T:Z9.Mvvm.Messaging.Messenger">
            <summary>
            A tool for broadcasting message
            </summary>
        </member>
        <member name="P:Z9.Mvvm.Messaging.Messenger.Default">
            <summary>
            Messenger instance
            </summary>
        </member>
        <member name="M:Z9.Mvvm.Messaging.Messenger.Register``1(System.Object,System.Action{``0})">
            <summary>
            Register the message
            </summary>
            <typeparam name="TMsg">Message type</typeparam>
            <param name="reciepient">Message reciepient</param>
            <param name="action">Delegate method</param>
            <exception cref="T:System.ArgumentNullException">Reciepient is null</exception>
        </member>
        <member name="M:Z9.Mvvm.Messaging.Messenger.Register``1(System.Object,System.Object,System.Action{``0})">
            <summary>
            Register the message with token
            </summary>
            <typeparam name="TMsg">Message type</typeparam>
            <param name="reciepient">Message reciepient</param>
            <param name="token">Message token</param>
            <param name="action">Delegate method</param>
            <exception cref="T:System.ArgumentNullException">Reciepient is null</exception>
        </member>
        <member name="M:Z9.Mvvm.Messaging.Messenger.Send``1(``0)">
            <summary>
            Send message
            </summary>
            <typeparam name="TMsg">Message type</typeparam>
            <param name="msg">Message</param>
        </member>
        <member name="M:Z9.Mvvm.Messaging.Messenger.Send``1(``0,System.Object)">
            <summary>
            Send message with token
            </summary>
            <typeparam name="TMsg">Message type</typeparam>
            <param name="msg">Message</param>
            <param name="token">Message Token</param>
        </member>
        <member name="M:Z9.Mvvm.Messaging.Messenger.Unregister(System.Object)">
            <summary>
            Unregister all message for target reciepient
            </summary>
            <param name="reciepient">reciepient</param>
        </member>
        <member name="T:Z9.Mvvm.NotificationObject">
            <summary>
            ViewModel base class
            </summary>
        </member>
        <member name="E:Z9.Mvvm.NotificationObject.PropertyChanged">
            <summary>
            Occurs when property value changed
            </summary>
        </member>
        <member name="P:Z9.Mvvm.NotificationObject.IsInDesignMode">
            <summary>
            Current code mode (design mode | run-time mode)
            </summary>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.OnPropertyChanged(System.String)">
            <summary>
            Notify property changed
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.NotifyAll">
            <summary>
            Notify all properties changed (beta)
            </summary>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.Set``1(``0@,``0,System.String)">
            <summary>
            Set property value
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
            <param name="propertyName">Property name</param>
            <returns>Whether success</returns>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.GetProperty``1(System.String)">
            <summary>
            A method for property getter
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="propertyName">Property name</param>
            <returns>Property value</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.GetProperty``1(``0,System.String)">
            <summary>
            A method for property getter
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="defaultValue">Default value set</param>
            <param name="propertyName">Property name</param>
            <returns>Property value</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.SetProperty(System.Object,System.String)">
            <summary>
            A method for property setter
            </summary>
            <param name="propertyValue">Property value</param>
            <param name="propertyName">Property name</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.OnInitializeInDesignMode">
            <summary>
            Xaml designer's code
            </summary>
        </member>
        <member name="M:Z9.Mvvm.NotificationObject.OnInitializeInRuntime">
            <summary>
            User's code
            </summary>
        </member>
    </members>
</doc>
